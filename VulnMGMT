'''
@Auther: Muhammed M.Bassem
@email: muhammed.m.bassem@gmail.com
@Mobile: +201069650275
'''
import json 

'''
@https://en.wikipedia.org/wiki/Common_Vulnerability_Scoring_System
{
 u'service_protocol': u'tcp', 
 u'cvss_vector': u'(AV:N/AC:L/Au:N/C:N/I:N/A:P)', 
 u'severity': u'high', 
 u'service_port': u'443', 
 u'team': u'Team O', 
 u'ip': u'10.117.209.28', 
 u'vulnage': u'468', 
 u'signature': u'PHP Vulnerability: CVE-2011-3267', 
 u'cvss': u'5'
 }
'''


## Example for CVSS with no local access is 4.6 using vulnerability search 
## Example for Vulnage with no local access is 12 using vulnerability search 


myData=[]
teamNames={}
severityList=['critical','high','medium','low']

def severityIsExist(severityName):
	severityName= severityName.lower().lstrip().rstrip()
	if severityName in severityList:
		return True
	return False

def teamIsExist(teamName):
	teamName= teamName.lower().lstrip().rstrip()
	if teamName in teamNames:
		return True
	return False

def printTeamList():
	for key in range(len(list(teamNames))):
		print "["+str(key)+"] "+ list(teamNames)[key]

def printSeverityList():
	for key in range(len(list(severityList))):
		print "["+str(key)+"] "+ list(severityList)[key]

def inputTeamName():
	teamName=-1
	while not (int(teamName) in range(len(list(teamNames)))):
		teamName=input(">>> Which Team:")
	return teamName

def inputSeverityName():
	risk=-1
	while not (int(risk) in range(len(list(severityList)))):
		risk=input(">>> Which Risk:")
	return risk


def printVulnCounterByTeam():
	printTeamList()
	inputme=inputTeamName()
	print "-------------------------------------------------------------------------------------------------------------------------"
	print ""
	print "[+] Total Vulnerabilities : "+str(teamNames[str(list(teamNames)[inputme])]) + " by Team: "+ str(list(teamNames)[inputme])
	print "[-] PS: Number vulnerabilities may be duplicated because of existance on different machines .... "
	print "-------------------------------------------------------------------------------------------------------------------------"
	print ""

def printTopListBySeverityForTeam():
        printTeamList()
        inputme=inputTeamName()
        teamName=str(list(teamNames)[inputme])
   		     
        printSeverityList()    
        inputme=inputSeverityName()
        risk=(list(severityList)[inputme]) 
        print "-------------------------------------------------------------------------------------------------------------------------"
        print ""
        resultSet=teamTopListBySeverity(myData,teamName,risk)
        print resultSet
        print "[*] Result Set Size: " + str(len(resultSet))
        print "[-] PS: Removed Duplicated Vulnerabilities ... "
        print "-------------------------------------------------------------------------------------------------------------------------"
        print ""


def printTopListBySeverityForVuln():
   		     
        printSeverityList()    
        inputme=inputSeverityName()
        risk=(list(severityList)[inputme]) 
        print "-------------------------------------------------------------------------------------------------------------------------"
        print ""
        resultSet=vulnTopListBySeverity(myData,risk)
        print resultSet
        print "[*] Result Set Size: " + str(len(resultSet))
        print "[-] PS: Removed Duplicated Vulnerabilities ... "
        print "-------------------------------------------------------------------------------------------------------------------------"
        print ""


def printTopListByCSVVForTeam():
        printTeamList()
        inputme=inputTeamName()
        teamName=str(list(teamNames)[inputme])
        csvvValue=-1
        while True:
       		csvvValue=float(raw_input("Enter CSVV Value: "))
       		if csvvValue >=0.0 and csvvValue <=10.0: 
       			break
       	print csvvValue

       	print "-------------------------------------------------------------------------------------------------------------------------"
       	print ""
       	resultSet=teamTopListByCVSS(myData,teamName,csvvValue)
       	print resultSet
        print "[*] Result Set Size: " + str(len(resultSet))
       	print "[-] PS: Removed Duplicated Vulnerabilities ... "
       	print "-------------------------------------------------------------------------------------------------------------------------"
       	print ""


def printTopListByCSVVForVuln():
        csvvValue=-1
        while True:
       		csvvValue=float(raw_input("Enter CSVV Value: "))
       		if csvvValue >=0.0 and csvvValue <=10.0: 
       			break
       	print csvvValue

       	print "-------------------------------------------------------------------------------------------------------------------------"
       	print ""
       	resultSet=vulnTopListByCVSS(myData,csvvValue)
       	print resultSet
        print "[*] Result Set Size: " + str(len(resultSet))
       	print "[-] PS: Removed Duplicated Vulnerabilities ... "
       	print "-------------------------------------------------------------------------------------------------------------------------"
       	print ""



def printTopListByVulnAgeForTeam():
        printTeamList()
        inputme=inputTeamName()
        teamName=str(list(teamNames)[inputme])
        vulnAge=int(raw_input("Enter VulnAge Value: "))
       		
	print "-------------------------------------------------------------------------------------------------------------------------"
	print ""
	resultSet=teamTopListByVulnAge(myData,teamName,vulnAge)
	print resultSet
	print "[*] Result Set Size: " + str(len(resultSet))
	print "[-] PS: Removed Duplicated Vulnerabilities ... "
	print "[-] Listing all Signature whose vulnAge >= "+str(vulnAge)
	print "-------------------------------------------------------------------------------------------------------------------------"
	print ""


def printTopListByVulnAgeForVuln():
    vulnAge=int(raw_input("Enter VulnAge Value: "))
    print "-------------------------------------------------------------------------------------------------------------------------"
    print ""
    resultSet=vulnTopListByVulnAge(myData,vulnAge)
    print resultSet
    print "[*] Result Set Size: " + str(len(resultSet))
    print "[-] PS: Removed Duplicated Vulnerabilities ... "
    print "[-] Listing all Signature whose vulnAge >= "+str(vulnAge)
    print "-------------------------------------------------------------------------------------------------------------------------"
    print ""

def printTeamMatrix():
	printMatrix("Team Statistics Tables",printSeverityStatisticsByTeam(myData))

def teamControl():
        print "*** Team Control ***"
	# Team Options

        message11="[1] List Teams Names:"
        print message11
        
        message12="[2] Print Vulnerabilities Counter by Team: "
        print message12

        message13="[3] Print TopList by severity: "
        print message13

        message14="[4] Print TopList by CVSS: "
        print message14

        message15="[5] Print TopList by Vulnage: "
        print message15
	
        message16="[6] Print the Team Statistics Table"
        print message16

        argument=raw_input(">>>.. ")
        switcher={
                1:printTeamList,
                2:printVulnCounterByTeam,
                3:printTopListBySeverityForTeam, 4:printTopListByCSVVForTeam, 5: printTopListByVulnAgeForTeam,
                6:printTeamMatrix}
        func = switcher.get(int(argument), lambda: "Invalid Option")
        func()
        mainControl()



def vulnControl():
	
    print "*** Vuln Control ***"
    #message21="[1] List Teams Names:"
    #print message21

    message22="[1] Print TopList by severity: "
    print message22

    message23="[2] Print TopList by CVSS: "
    print message23

    message24="[3] Print TopList by Vulnage: "
    print message24

    argument=raw_input(">>>.. ")
    switcher={

    
    1:printTopListBySeverityForVuln,  ### Done ### 
    2:printTopListByCSVVForVuln, ### Done ### 
    3:printTopListByVulnAgeForVuln, ### Done ###
    }

    func = switcher.get(int(argument), lambda: "Invalid Option")
    func()
    mainControl()

def mainControl():
      	controlHeader="Please Select one of top options by pressing numberical value: "
      	message1="[1]Categorized by Team"
      	message2="[2]Categorized by Vulnerability"
      	print "*** Main Control ***"
      	print controlHeader
      	print message1
      	print message2
      	argument=raw_input(">>>.. ")
      	switcher={1: teamControl, 2:vulnControl}
      	func0 = switcher.get(int(argument), lambda: "Invalid Option")
      	func0()
 
# print how many teams 
def howManyTeam():
	return len(teamNames)
# print how many teams 
def howManyVulns():
	return len(myData)
def removeDuplicates(dataSet):
	return list(dict.fromkeys(dataSet))

def printMatrix(title,matrix):
	wingLine="*"*(5+len(title)/2)
	freeLine="*"*(len(wingLine)*2+len(title))
	footerLine="-"*len(freeLine)
	print freeLine
	print wingLine+title+wingLine
	print freeLine
	for raw in matrix:
		print raw[0:]
	print footerLine
	mainControl()
# How many vuln with severity X for Team Y 
def teamSeverityCounter(dataSet,teamName,severityValue):
	return (map(lambda x: x['team']==teamName and x['severity']==severityValue,dataSet )).count(True)

def teamTopListBySeverity(dataSet,teamName,severityValue):
	return removeDuplicates([x['signature'] for x in dataSet if x['team']==teamName if x['severity']==severityValue])

def addVuln(zlist, banned="L", condition=False):
	dict={}
	for i in zlist['cvss_vector'].replace("(","").replace(")","").split("/"):
		i = i.split(":")
		dict[i[0]]= i[1]
	'''
	AV
	Local (L)	A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. Examples of locally exploitable vulnerabilities are peripheral attacks such as Firewire/USB DMA attacks, and local privilege escalations (e.g., sudo).
	'''
	if dict['AV'] == banned:
		return condition
	return not condition


def vulnTopListBySeverity(dataSet,severityValue):
	return removeDuplicates([x['signature'] for x in dataSet if addVuln(x) if x['severity']==severityValue])

# Get ALL vulnSignature whose CVSS <= number 
def teamTopListByCVSS(dataSet,teamName,cValue):
	return removeDuplicates([x['signature'] for x in dataSet if x['team']==teamName if float(x['cvss'])==cValue])

def vulnTopListByCVSS(dataSet,cValue):
	return removeDuplicates([x['signature'] for x in dataSet if addVuln(x) if float(x['cvss'])==cValue])

# Get ALL vulnSignature whose vulnAge >= number 
def teamTopListByVulnAge(dataSet,teamName,vulnValue):
	return removeDuplicates([x['signature'] for x in dataSet if x['team']==teamName if int(x['vulnage'])>=vulnValue])

def vulnTopListByVulnAge(dataSet,vulnValue):
	return removeDuplicates([x['signature'] for x in dataSet if addVuln(x) if int(x['vulnage'])>=vulnValue])



# Print Table with header 
def printSeverityStatisticsByTeam(dataSet):
	#Header: Team name Critical High Medium Low
	matrix=[["Team Name","Critical","High","Medium","Low","Total"]]
	for key in teamNames:
		raw=returnTeamSeverityStatistics(dataSet,key)
		raw.append(teamNames[key])
		matrix.append(raw)
	return matrix
# Return Value without header 
def returnTeamSeverityStatistics(dataSet,teamName):
	#Header: Team name Critical High Medium Low
	mytable=[]
	mytable.append(teamName)
	for svalue in severityList:
		mytable.append(teamSeverityCounter(dataSet,teamName,svalue))
	return mytable

# Statistics by Team TopList (Group by team and sort by severity Level )
# 
def readFile(filename):
	print "[-] reading the file ..... "
	with open(filename) as file:
		data=json.load(file)
		for raw in data:
			myData.append(raw)
			# Calculate Total Vulns for each team in the file 
			if not(teamNames.has_key(raw['team'])):
				teamNames[raw['team']]=1
			else:	
				teamNames[raw['team']]+=1

def operationFunction():
	filePath=raw_input("Please Enter Full Physical Path for the file: ")
	readFile(filePath)
	print "Finished reading .... "
	mainControl()


operationFunction()


